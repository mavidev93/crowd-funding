{"version":3,"sources":["features/FundedCampaigns/FundedCampaigns.tsx"],"names":["FundedCampaigns","useMoralis","account","isWeb3Enabled","useState","ids","setIds","fundVals","setFundVals","contractData","useContract","campaigns","useGetCampaigns","claimRefund","useWeb3Contract","abi","contractAddress","crowdFundAddress","undefined","functionName","runContractFunction","handleClaimRefund","hash","params","useEffect","getIds","getCampaignDataOfFunder","contract","campaignsData","map","c","id","values","value","className","length","reverse","i","campaign","text","variant","onClick","e","campaignHash","disabled","goalAchieved","isCampaignOpen","campaignTitle","nanoid"],"mappings":"+PAmGeA,UAlFS,WACtB,MAAmCC,cAA3BC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,cAGjB,EAAsBC,mBAA0B,MAAhD,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAgCF,mBAA0B,MAA1D,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAeC,cACfC,EAAYC,YAAgBP,GAGLQ,EAAgBC,YAAgB,CAC3DC,IAAG,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAcM,IACnBC,iBAA6B,OAAZP,QAAY,IAAZA,OAAA,EAAAA,EAAcQ,wBAAoBC,EACnDC,aAAc,gBAHRC,oBAMFC,EAAiB,iDAAG,WAAOC,GAAP,oGAEhBT,EAAY,CAAEU,OAAQ,CAAEA,OAAQ,CAAED,WAFlB,8GAAH,sDAwBvB,OAjBAE,qBAAU,WACR,GAAKtB,GAAYO,EAAjB,CAIA,IAAMgB,EAAM,iDAAG,kHACeC,YAC1BjB,EAAakB,SACbzB,GAHW,OACP0B,EADO,OAKPvB,EALO,OAKDuB,QALC,IAKDA,OALC,EAKDA,EAAeC,KAAI,SAACC,GAAD,OAAOA,EAAEC,EAAT,IACzBC,EANO,OAMEJ,QANF,IAMEA,OANF,EAMEA,EAAeC,KAAI,SAACC,GAAD,OAAOA,EAAEG,KAAT,IAClC5B,GAAOC,EAAOD,GACd2B,GAAUxB,EAAYwB,GART,2CAAH,qDAUZP,GAXC,MAFCnB,EAAO,KAcV,GAAE,CAACJ,IAEF,qBAAKgC,UAAU,0BAAf,SACG/B,EACC,mCACGQ,EACDA,EAAUwB,OACV,YAAIxB,GAAWyB,UAAUP,KAAI,SAACC,EAAGO,GAAJ,OAC3B,sBAAKH,UAAU,0BAAf,UACE,cAAC,IAAD,CAAkBI,SAAUR,IAE5B,8BACE,sBAAMI,UAAU,aAAhB,+BACA,uBAAMA,UAAU,2BAAhB,UACG,IACA3B,GAAYA,EAAS8B,MAChB,OAGV,sBAAKH,UAAU,oBAAf,UACE,cAAC,IAAD,CACEK,KAAK,eACLC,QAAQ,YACRC,QAAS,SAACC,GAAD,OAAOrB,EAAkBS,EAAEa,aAA3B,EACTC,SAAUd,EAAEe,cAAgBf,EAAEgB,iBAEhC,qBAAKZ,UAAU,UAAf,SACE,cAAC,IAAD,CACES,aAAcb,EAAEa,aAChBI,cAAejB,EAAEiB,uBArBqBC,cADnB,IA2B1B,mDAA0B,OAG/B,cAAC,IAAD,KAIP,C","file":"static/js/28.d95902a2.chunk.js","sourcesContent":["/** @format */\n\n//React\nimport { useState, useEffect } from \"react\";\n\n//Third Party\nimport { useMoralis, useWeb3Contract } from \"react-moralis\";\nimport { nanoid } from \"nanoid\";\n\n//App\nimport CampaignCardData from \"../../components/CampaignCardData/CampaignCardData\";\nimport { getCampaignDataOfFunder } from \"../../helpers/web3Helpers\";\nimport ReadMore from \"../../components/ReadMore/ReadMore\";\nimport useGetCampaigns from \"../../hooks/useGetCampaigns\";\nimport useContract from \"../../hooks/useContract\";\nimport CommonButton from \"../../components/CommonButton/CommonButton\";\nimport ConnectPlease from \"../../components/ConnectPlease/ConnectPlease\";\nconst FundedCampaigns = () => {\n  const { account, isWeb3Enabled } = useMoralis();\n\n  //States\n  const [ids, setIds] = useState<null | number[]>(null);\n  const [fundVals, setFundVals] = useState<null | string[]>(null);\n  const contractData = useContract();\n  const campaigns = useGetCampaigns(ids);\n\n  //Contract Functions\n  const { runContractFunction: claimRefund } = useWeb3Contract({\n    abi: contractData?.abi,\n    contractAddress: contractData?.crowdFundAddress || undefined,\n    functionName: \"claimRefund\",\n  });\n\n  const handleClaimRefund = async (hash: string) => {\n    try {\n      await claimRefund({ params: { params: { hash } } });\n    } catch (e) {}\n  };\n\n  //Effects\n  useEffect(() => {\n    if (!account || !contractData) {\n      setIds(null);\n      return;\n    }\n    const getIds = async () => {\n      const campaignsData = await getCampaignDataOfFunder(\n        contractData.contract,\n        account\n      );\n      const ids = campaignsData?.map((c) => c.id);\n      const values = campaignsData?.map((c) => c.value);\n      ids && setIds(ids);\n      values && setFundVals(values);\n    };\n    getIds();\n  }, [account]);\n  return (\n    <div className=\"m-3 md:w-3/5 md:mx-auto\">\n      {isWeb3Enabled ? (\n        <>\n          {campaigns?\n          campaigns.length?\n          [...campaigns].reverse().map((c, i) => (\n            <div className=\"m-3 py-2 px-3 shadow-md\" key={nanoid()}>\n              <CampaignCardData campaign={c} />\n\n              <p>\n                <span className=\"capitalize\">your fund amount:</span>\n                <span className=\"text-green-500 uppercase\">\n                  {\" \"}\n                  {fundVals && fundVals[i]}\n                </span>{\" \"}\n              </p>\n\n              <div className=\"flex items-center\">\n                <CommonButton\n                  text=\"Claim Refund\"\n                  variant=\"contained\"\n                  onClick={(e) => handleClaimRefund(c.campaignHash)}\n                  disabled={c.goalAchieved || c.isCampaignOpen}\n                />\n                <div className=\"ml-auto\">\n                  <ReadMore\n                    campaignHash={c.campaignHash}\n                    campaignTitle={c.campaignTitle}\n                  />\n                </div>\n              </div>\n            </div>\n          )):<p>No Campaign Found!</p>:null}\n        </>\n      ) : (\n        <ConnectPlease />\n      )}\n    </div>\n  );\n};\n\nexport default FundedCampaigns;\n"],"sourceRoot":""}