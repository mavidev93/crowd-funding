{"version":3,"sources":["../../src/index.ts","../../src/metamaskAdapter.ts","../../src/baseEvmAdapter.ts"],"names":["constructor","adapterOptions","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","provider","init","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","ADAPTER_EVENTS","log","options","setAdapterSettings","connect","getChainConfig","adapter","WalletLoginError","method","chainId","this","status","reconnected","rehydrated","disconnect","cleanup","getUserInfo","switchChain","params","chainConfig","switchError","chainName","rpcUrls","authenticateUser","accounts","existingToken","getSavedToken","checkIfTokenIsExpired","idToken","payload","domain","window","uri","address","parseInt","version","nonce","Math","issuedAt","signChallenge","challenge","signedMessage","verifySignedChallenge","saveToken","clearToken"],"mappings":"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","file":"static/js/20.0fed8d25.chunk.js","sourcesContent":["\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {\n    _validateInputs();\n    let handled = false;\n    return new Promise((resolve) => {\n        if (window.ethereum) {\n            handleEthereum();\n        }\n        else {\n            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });\n            setTimeout(() => {\n                handleEthereum();\n            }, timeout);\n        }\n        function handleEthereum() {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            window.removeEventListener('ethereum#initialized', handleEthereum);\n            const { ethereum } = window;\n            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n                resolve(ethereum);\n            }\n            else {\n                const message = mustBeMetaMask && ethereum\n                    ? 'Non-MetaMask window.ethereum detected.'\n                    : 'Unable to detect window.ethereum.';\n                !silent && console.error('@metamask/detect-provider:', message);\n                resolve(null);\n            }\n        }\n    });\n    function _validateInputs() {\n        if (typeof mustBeMetaMask !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n        }\n        if (typeof silent !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n        }\n        if (typeof timeout !== 'number') {\n            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n        }\n    }\n}\nmodule.exports = detectEthereumProvider;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFNBQVMsc0JBQXNCLENBQUMsRUFDOUIsY0FBYyxHQUFHLEtBQUssRUFDdEIsTUFBTSxHQUFHLEtBQUssRUFDZCxPQUFPLEdBQUcsSUFBSSxHQUNmLEdBQUcsRUFBRTtJQUVKLGVBQWUsRUFBRSxDQUFDO0lBRWxCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBRW5CLGNBQWMsRUFBRSxDQUFDO1NBRWxCO2FBQU07WUFFTCxNQUFNLENBQUMsZ0JBQWdCLENBQ3JCLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ2YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsY0FBYyxFQUFFLENBQUM7WUFDbkIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2I7UUFFRCxTQUFTLGNBQWM7WUFFckIsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTzthQUNSO1lBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQztZQUVmLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxzQkFBc0IsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUVuRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBRTVCLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkI7aUJBQU07Z0JBRUwsTUFBTSxPQUFPLEdBQUcsY0FBYyxJQUFJLFFBQVE7b0JBQ3hDLENBQUMsQ0FBQyx3Q0FBd0M7b0JBQzFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQztnQkFFeEMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDaEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLGVBQWU7UUFDdEIsSUFBSSxPQUFPLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO1FBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFsRkQsaUJBQVMsc0JBQXNCLENBQUMifQ==","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, getChainConfig, WalletLoginError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\n\nclass MetamaskAdapter extends BaseEvmAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n    this.sessionTime = adapterOptions.sessionTime || 86400;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n\n    if (options !== null && options !== void 0 && options.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnect();\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n","import { BaseAdapter, WalletLoginError, ADAPTER_STATUS, getSavedToken, checkIfTokenIsExpired, signChallenge, verifySignedChallenge, saveToken, clearToken } from '@web3auth/base';\n\nclass BaseEvmAdapter extends BaseAdapter {\n  async authenticateUser() {\n    var _this$chainConfig;\n\n    if (!this.provider || !((_this$chainConfig = this.chainConfig) !== null && _this$chainConfig !== void 0 && _this$chainConfig.chainId)) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const signedMessage = await this.provider.request({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]]\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n}\n\nexport { BaseEvmAdapter };\n//# sourceMappingURL=baseEvmAdapter.esm.js.map\n"],"sourceRoot":""}