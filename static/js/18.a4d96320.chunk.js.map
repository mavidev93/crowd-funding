{"version":3,"sources":["../../src/messages.ts","../../src/interfaces.ts","../../src/config.ts","../../src/loglevel.ts","../../src/utils.ts","../../src/baseProvider.ts","../../src/embedUtils.ts","../../src/PopupHandler.ts","../../src/communicationProvider.ts","../../src/inPageProvider.ts","../../src/siteMetadata.ts","../../src/embed.ts","../../src/solanaWalletAdapter.ts","../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js","../../src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js"],"names":["disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","chainId","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","window","loglevel","getWindowId","Math","getTorusUrl","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","h","dualScreenLeft","dualScreenTop","document","left","top","w","constructor","jsonRpcStreamName","isDuplexStream","messages","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","req","res","message","data","next","done","error","log","createLoggerMiddleware","origin","location","request","Array","args","params","getRpcPromiseCallback","send","sendAsync","_handleStreamDisconnect","remoteLabel","emitter","warningMsg","logStreamDisconnectWarning","handleEvent","handlerArgs","handlerWrapper","handler","handle","resolve","htmlToElement","html","template","trimmedHtml","features","target","getPopupFeatures","_setupTimer","Number","setInterval","clearInterval","open","Promise","close","redirect","TorusCommunicationProvider","languageTranslations","configuration","userLanguage","userLanguages","Object","config","getUserLanguage","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","url","currentLoginProvider","isLoggedIn","isIFrameFullScreen","isConnected","_initializeState","torusIframe","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","handledWindow","windowId","_displayIframe","style","hideTorusButton","showTorusButton","_rpcRequest","cb","_payload","_handleConnect","_handleDisconnect","errorMessage","_handleCloseWindow","_createPopupBlockAlert","logoUrl","torusAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","buttonPosition","hasEmittedConnection","torusWidgetVisibility","initialized","isPermanentlyDisconnected","TorusInPageProvider","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","accounts","isInternal","callback","_handleAccountsChanged","isEthAccounts","finalAccounts","dequal","_handleChainChanged","_handleUnlockStateChanged","img","reject","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","getSiteIcon","name","version","require","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","storage","x","e","storageAvailable","torusIframeHtml","modalZIndex","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","setAPIKey","dappStorageKey","torusIframeUrl","hashParams","handleSetup","dappMetadata","network","login","loginWithPrivateKey","userInfo","privateKey","success","logout","cleanUp","clearInit","element","isElement","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","provider","topupResponse","getAccounts","response","sendTransaction","requireAllSignatures","signTransaction","transaction","messageOnly","parsed","JSON","signature","publicKey","Buffer","signAllTransactions","encodedMessage","tx","responses","signatures","item","transactions","signMessage","getGaslessPublicKey","handleDappStorageKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","communicationProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","err","proxiedInPageProvider","deleteProperty","proxiedCommunicationProvider","torusAlertContainer","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","solanaProvider","tickerName","rpcTarget","blockExplorerUrl","displayName","ticker","logo","getChainConfig","chainConfig","ADAPTER_EVENTS","options","connect","this","WalletInitializationError","adapter","torusInpageProvider","reconnected","rehydrated","WalletLoginError","disconnect","cleanup","setAdapterSettings","module","exports","equal","a","b","length","i","keys","isArray","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key","isStream","stream","pipe","writable","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform","authenticateUser","existingToken","getSavedToken","checkIfTokenIsExpired","idToken","domain","uri","address","parseInt","nonce","issuedAt","signChallenge","challenge","display","signedMessage","verifySignedChallenge","bs58","saveToken","clearToken","basex","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","size","b256","carry","it3","Error","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string"],"mappings":"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","file":"static/js/18.a4d96320.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nconst {\n  version\n} = require(\"../package.json\");\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(\"Solana Embed Version :\".concat(version));\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message: transaction.serializeMessage().toString(\"hex\"),\n        messageOnly: true\n      }\n    }); // reconstruct signature pair\n\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedMessage = transactions.map(tx => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true\n      }\n    }); // reconstruct signature pairs\n\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null,"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseSolanaAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n\n      try {\n        const torusInpageProvider = this.torusInstance.provider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n\n    if (options !== null && options !== void 0 && options.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n","import { BaseAdapter, WalletLoginError, ADAPTER_STATUS, getSavedToken, checkIfTokenIsExpired, signChallenge, verifySignedChallenge, saveToken, clearToken } from '@web3auth/base';\nimport bs58 from 'bs58';\n\nclass BaseSolanaAdapter extends BaseAdapter {\n  async authenticateUser() {\n    var _this$chainConfig;\n\n    if (!this.provider || !((_this$chainConfig = this.chainConfig) !== null && _this$chainConfig !== void 0 && _this$chainConfig.chainId)) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request({\n      method: \"getAccounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\"\n        }\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, bs58.encode(signedMessage), challenge, this.name, this.sessionTime);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request({\n      method: \"getAccounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n}\n\nexport { BaseSolanaAdapter };\n//# sourceMappingURL=baseSolanaAdapter.esm.js.map\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"],"sourceRoot":""}